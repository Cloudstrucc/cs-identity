<!-- Your existing HTML for the wizard, with three steps -->
<div class="container-lg">
  <!-- Page header (unchanged) -->
  <div class="row align-items-center mb-7">
    <div class="col-12 col-md-auto order-md-1 d-flex align-items-center justify-content-center mb-4 mb-md-0">
      <div class="avatar text-info me-2">
        <i class="fs-2" data-duoicon="world"></i>
      </div>
      San Francisco, CA â€“&nbsp;<time datetime="20:00">8:00 PM</time>
    </div>
    <div class="col-12 col-md text-center text-md-start">
      <h1>Hello, John</h1>
      <p class="fs-lg text-body-secondary mb-0">Here's a summary of your account activity for this week.</p>
    </div>
  </div>

  <!-- Divider -->
  <hr class="my-8" />

  <div class="row">
    <div class="col-12">
      <!-- Wizard Card -->
      <div class="card mb-12">
        <div class="card-header">
          <h3 class="fs-6 mb-0">Configure your identity</h3>
          <!-- Wizard Step Navigation -->
          <ul class="nav nav-pills mt-3" id="identityWizard" role="tablist">
            <li class="nav-item" role="presentation">
              <button type="button" class="nav-link active" id="wizard-step1-tab" data-bs-toggle="pill" data-bs-target="#wizard-step1" role="tab" aria-controls="wizard-step1" aria-selected="true">
                1. Facial Recognition
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button type="button" class="nav-link" id="wizard-step2-tab" data-bs-toggle="pill" data-bs-target="#wizard-step2" role="tab" aria-controls="wizard-step2" aria-selected="false">
                2. ID Verification
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button type="button" class="nav-link" id="wizard-step3-tab" data-bs-toggle="pill" data-bs-target="#wizard-step3" role="tab" aria-controls="wizard-step3" aria-selected="false">
                3. Issue Credential
              </button>
            </li>
          </ul>
        </div>

        <div class="card-body">
          <!-- Wizard Content -->
          <div class="tab-content" id="wizardTabContent">
            <!-- Step 1: Facial Recognition -->
            <div class="tab-pane fade show active" id="wizard-step1" role="tabpanel" aria-labelledby="wizard-step1-tab">
              <div class="text-center">
                <h4 class="fs-6">Facial Recognition</h4>
                <p class="text-body-secondary">Align your face in the frame to verify your identity.</p>
                <!-- Video element with metallic white border -->
                <video id="video" class="img-fluid mb-3 border border-2 rounded" 
                       style="border-color: #f0f0f0; box-shadow: 0 0 8px rgba(255, 255, 255, 0.7);" 
                       width="320" height="240" autoplay></video>
                <button id="capture-btn" type="button" class="btn btn-primary mx-auto d-block">Scan Face</button>
                <canvas id="canvas" width="320" height="240" class="d-none"></canvas>
              </div>
              <div class="d-flex justify-content-end mt-4">
                <button type="button" class="btn btn-dark" id="step1-next-btn" disabled>Next</button>
              </div>
            </div>

            <!-- Step 2: ID Verification -->
            <div class="tab-pane fade" id="wizard-step2" role="tabpanel" aria-labelledby="wizard-step2-tab">
              <div class="text-center">
                <h4 class="fs-6">ID Verification</h4>
                <p class="text-body-secondary">Upload your government-issued ID for verification.</p>
                <input type="file" id="upload-id" accept="image/*" class="form-control mt-3 mx-auto w-75">
                <button id="verify-id-btn" type="button" class="btn btn-secondary mt-3">Verify ID</button>
              </div>
              <div class="d-flex justify-content-between mt-4">
                <button type="button" class="btn btn-dark" 
                        onclick="new bootstrap.Tab(document.querySelector('#wizard-step1-tab')).show()">
                  Back
                </button>
                <button type="button" class="btn btn-dark" id="step2-next-btn" disabled>
                  Next
                </button>
              </div>
            </div>

            <!-- Step 3: Issue Verifiable Credential -->
            <div class="tab-pane fade" id="wizard-step3" role="tabpanel" aria-labelledby="wizard-step3-tab">
              <div class="text-center">
                <h4 class="fs-6">Issue Verifiable Credential</h4>
                <p class="text-body-secondary">Once verified, your decentralized identity will be issued.</p>
                <button id="issue-vc-btn" type="button" class="btn btn-success mt-3">Get DID Credential</button>
              </div>
              <div class="d-flex justify-content-start mt-4">
                <button type="button" class="btn btn-dark" 
                        onclick="new bootstrap.Tab(document.querySelector('#wizard-step2-tab')).show()">
                  Back
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Load face-api.js models from the specified folders
  window.addEventListener('DOMContentLoaded', async () => {
    await Promise.all([
      faceapi.nets.tinyFaceDetector.loadFromUri('/models/tiny_face_detector_model'),
      faceapi.nets.faceLandmark68Net.loadFromUri('/models/face_landmark_68'),
      faceapi.nets.faceRecognitionNet.loadFromUri('/models/face_recognition')
    ]);
    console.log("Face-api models loaded.");
  });

  // Step 1: Capture Face Descriptor from live video
  const captureBtn = document.getElementById('capture-btn');
  captureBtn.addEventListener('click', async () => {
    const videoEl = document.getElementById('video');
    // Capture a frame from the video
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');
    context.drawImage(videoEl, 0, 0, canvas.width, canvas.height);
    
    // Detect face and compute descriptor using TinyFaceDetector
    const detection = await faceapi
      .detectSingleFace(canvas, new faceapi.TinyFaceDetectorOptions())
      .withFaceLandmarks()
      .withFaceDescriptor();
    
    if (detection) {
      // Convert descriptor to an array and store it in localStorage
      localStorage.setItem('faceDescriptor', JSON.stringify(Array.from(detection.descriptor)));
      alert("Face captured successfully.");
      // Enable Next button for Step 1
      document.getElementById('step1-next-btn').disabled = false;
    } else {
      alert("No face detected. Please try again.");
    }
  });

  // Navigation: Step 1 to Step 2
  document.getElementById('step1-next-btn').addEventListener('click', () => {
    new bootstrap.Tab(document.querySelector('#wizard-step2-tab')).show();
  });

  // Step 2: Verify ID Photo against stored Face Descriptor
  document.getElementById('verify-id-btn').addEventListener('click', async () => {
    const fileInput = document.getElementById('upload-id');
    const file = fileInput.files[0];
    if (!file) {
      alert("Please upload an image for ID verification.");
      return;
    }
    
    // Helper: Convert file to an HTMLImageElement using FileReader
    const loadImage = (file) => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const img = new Image();
          img.onload = () => resolve(img);
          img.onerror = () => reject(new Error("Error loading image."));
          img.src = reader.result;
        };
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    };
    
    let img;
    try {
      img = await loadImage(file);
    } catch (error) {
      console.error(error);
      alert("Failed to load image. Please try again.");
      return;
    }
    
    console.log("Image dimensions:", img.width, img.height);
    
    // Adjust detector options as needed for ID images
    const detectorOptions = new faceapi.TinyFaceDetectorOptions({ inputSize: 416, scoreThreshold: 0.7 });
    
    // Detect face in the ID image using the loaded image element
    const detection = await faceapi
      .detectSingleFace(img, detectorOptions)
      .withFaceLandmarks()
      .withFaceDescriptor();
    
    if (!detection) {
      alert("No face detected in the ID image.");
      return;
    }
    
    // Convert the detected ID face descriptor to a standard array
    const idDescriptor = Array.from(detection.descriptor);
    
    // Retrieve the stored face descriptor from Step 1 and convert it to an array
    const stored = localStorage.getItem('faceDescriptor');
    if (!stored) {
      alert("No face descriptor found from facial recognition. Please capture your face first.");
      return;
    }
    const faceDescriptor = JSON.parse(stored);
    
    // Log descriptor lengths for debugging
    console.log("Stored descriptor length:", faceDescriptor.length);
    console.log("ID descriptor length:", idDescriptor.length);
    
    // Compute the Euclidean distance between the two descriptors
    const distance = faceapi.euclideanDistance(faceDescriptor, idDescriptor);
    console.log("Distance:", distance);
    
    // Set a threshold for a match (0.6 is common; adjust as needed)
    if (distance < 0.7) {
      alert("Face match successful!");
      // Enable Next button for Step 2
      document.getElementById('step2-next-btn').disabled = false;
    } else {
      alert("Face match unsuccessful. Please try again.");
      document.getElementById('step2-next-btn').disabled = true;
    }
  });

  // Navigation: Step 2 to Step 3
  document.getElementById('step2-next-btn').addEventListener('click', () => {
    new bootstrap.Tab(document.querySelector('#wizard-step3-tab')).show();
  });
</script>



